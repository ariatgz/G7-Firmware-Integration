
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c8  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  080046c0  080046c0  000056c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f68  08004f68  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004f68  08004f68  00005f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f70  08004f70  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00005f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00005f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004f78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  20000060  08004fd8  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  08004fd8  00006848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e792  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029dc  00000000  00000000  00014820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00017200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af6  00000000  00000000  00018060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002886d  00000000  00000000  00018b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b40  00000000  00000000  000413c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe86b  00000000  00000000  00053f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015276e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cec  00000000  00000000  001527b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001564a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	080046a8 	.word	0x080046a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	080046a8 	.word	0x080046a8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	463b      	mov	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800053a:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_ADC1_Init+0x98>)
 800053c:	4a21      	ldr	r2, [pc, #132]	@ (80005c4 <MX_ADC1_Init+0x9c>)
 800053e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000540:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_ADC1_Init+0x98>)
 8000542:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000546:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000548:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_ADC1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800054e:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_ADC1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_ADC1_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800055a:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_ADC1_Init+0x98>)
 800056a:	4a17      	ldr	r2, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xa0>)
 800056c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_ADC1_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_ADC1_Init+0x98>)
 8000576:	2201      	movs	r2, #1
 8000578:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_ADC1_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_ADC1_Init+0x98>)
 8000584:	2201      	movs	r2, #1
 8000586:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_ADC1_Init+0x98>)
 800058a:	f000 fff7 	bl	800157c <HAL_ADC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000594:	f000 fc14 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000598:	2305      	movs	r3, #5
 800059a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800059c:	2301      	movs	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <MX_ADC1_Init+0x98>)
 80005aa:	f001 f943 	bl	8001834 <HAL_ADC_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005b4:	f000 fc04 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	40012000 	.word	0x40012000
 80005c8:	0f000001 	.word	0x0f000001

080005cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005de:	4b44      	ldr	r3, [pc, #272]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80005e0:	4a44      	ldr	r2, [pc, #272]	@ (80006f4 <MX_ADC3_Init+0x128>)
 80005e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e4:	4b42      	ldr	r3, [pc, #264]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80005e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005ec:	4b40      	ldr	r3, [pc, #256]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005f2:	4b3f      	ldr	r3, [pc, #252]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80005f8:	4b3d      	ldr	r3, [pc, #244]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005fe:	4b3c      	ldr	r3, [pc, #240]	@ (80006f0 <MX_ADC3_Init+0x124>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000606:	4b3a      	ldr	r3, [pc, #232]	@ (80006f0 <MX_ADC3_Init+0x124>)
 8000608:	2200      	movs	r2, #0
 800060a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060c:	4b38      	ldr	r3, [pc, #224]	@ (80006f0 <MX_ADC3_Init+0x124>)
 800060e:	4a3a      	ldr	r2, [pc, #232]	@ (80006f8 <MX_ADC3_Init+0x12c>)
 8000610:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <MX_ADC3_Init+0x124>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8000618:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <MX_ADC3_Init+0x124>)
 800061a:	2206      	movs	r2, #6
 800061c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800061e:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <MX_ADC3_Init+0x124>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <MX_ADC3_Init+0x124>)
 8000628:	2201      	movs	r2, #1
 800062a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800062c:	4830      	ldr	r0, [pc, #192]	@ (80006f0 <MX_ADC3_Init+0x124>)
 800062e:	f000 ffa5 	bl	800157c <HAL_ADC_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000638:	f000 fbc2 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800063c:	2303      	movs	r3, #3
 800063e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000640:	2301      	movs	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4828      	ldr	r0, [pc, #160]	@ (80006f0 <MX_ADC3_Init+0x124>)
 800064e:	f001 f8f1 	bl	8001834 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000658:	f000 fbb2 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800065c:	2308      	movs	r3, #8
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000660:	2302      	movs	r3, #2
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4821      	ldr	r0, [pc, #132]	@ (80006f0 <MX_ADC3_Init+0x124>)
 800066a:	f001 f8e3 	bl	8001834 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000674:	f000 fba4 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000678:	2309      	movs	r3, #9
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800067c:	2303      	movs	r3, #3
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	481a      	ldr	r0, [pc, #104]	@ (80006f0 <MX_ADC3_Init+0x124>)
 8000686:	f001 f8d5 	bl	8001834 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000690:	f000 fb96 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000694:	230a      	movs	r3, #10
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000698:	2304      	movs	r3, #4
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4813      	ldr	r0, [pc, #76]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80006a2:	f001 f8c7 	bl	8001834 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80006ac:	f000 fb88 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006b0:	230d      	movs	r3, #13
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006b4:	2305      	movs	r3, #5
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80006be:	f001 f8b9 	bl	8001834 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80006c8:	f000 fb7a 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006d0:	2306      	movs	r3, #6
 80006d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_ADC3_Init+0x124>)
 80006da:	f001 f8ab 	bl	8001834 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80006e4:	f000 fb6c 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000c4 	.word	0x200000c4
 80006f4:	40012200 	.word	0x40012200
 80006f8:	0f000001 	.word	0x0f000001

080006fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	@ 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a5b      	ldr	r2, [pc, #364]	@ (8000888 <HAL_ADC_MspInit+0x18c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d124      	bne.n	8000768 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800071e:	4b5b      	ldr	r3, [pc, #364]	@ (800088c <HAL_ADC_MspInit+0x190>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000722:	4a5a      	ldr	r2, [pc, #360]	@ (800088c <HAL_ADC_MspInit+0x190>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000728:	6453      	str	r3, [r2, #68]	@ 0x44
 800072a:	4b58      	ldr	r3, [pc, #352]	@ (800088c <HAL_ADC_MspInit+0x190>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000732:	623b      	str	r3, [r7, #32]
 8000734:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b55      	ldr	r3, [pc, #340]	@ (800088c <HAL_ADC_MspInit+0x190>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a54      	ldr	r2, [pc, #336]	@ (800088c <HAL_ADC_MspInit+0x190>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b52      	ldr	r3, [pc, #328]	@ (800088c <HAL_ADC_MspInit+0x190>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800074e:	2360      	movs	r3, #96	@ 0x60
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	2303      	movs	r3, #3
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	484b      	ldr	r0, [pc, #300]	@ (8000890 <HAL_ADC_MspInit+0x194>)
 8000762:	f002 f8bf 	bl	80028e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000766:	e08b      	b.n	8000880 <HAL_ADC_MspInit+0x184>
  else if(adcHandle->Instance==ADC3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a49      	ldr	r2, [pc, #292]	@ (8000894 <HAL_ADC_MspInit+0x198>)
 800076e:	4293      	cmp	r3, r2
 8000770:	f040 8086 	bne.w	8000880 <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000774:	4b45      	ldr	r3, [pc, #276]	@ (800088c <HAL_ADC_MspInit+0x190>)
 8000776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000778:	4a44      	ldr	r2, [pc, #272]	@ (800088c <HAL_ADC_MspInit+0x190>)
 800077a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800077e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000780:	4b42      	ldr	r3, [pc, #264]	@ (800088c <HAL_ADC_MspInit+0x190>)
 8000782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800078c:	4b3f      	ldr	r3, [pc, #252]	@ (800088c <HAL_ADC_MspInit+0x190>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000790:	4a3e      	ldr	r2, [pc, #248]	@ (800088c <HAL_ADC_MspInit+0x190>)
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	6313      	str	r3, [r2, #48]	@ 0x30
 8000798:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <HAL_ADC_MspInit+0x190>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079c:	f003 0320 	and.w	r3, r3, #32
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a4:	4b39      	ldr	r3, [pc, #228]	@ (800088c <HAL_ADC_MspInit+0x190>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a8:	4a38      	ldr	r2, [pc, #224]	@ (800088c <HAL_ADC_MspInit+0x190>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <HAL_ADC_MspInit+0x190>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b33      	ldr	r3, [pc, #204]	@ (800088c <HAL_ADC_MspInit+0x190>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c0:	4a32      	ldr	r2, [pc, #200]	@ (800088c <HAL_ADC_MspInit+0x190>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c8:	4b30      	ldr	r3, [pc, #192]	@ (800088c <HAL_ADC_MspInit+0x190>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 80007d4:	f44f 6385 	mov.w	r3, #1064	@ 0x428
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007da:	2303      	movs	r3, #3
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e6:	4619      	mov	r1, r3
 80007e8:	482b      	ldr	r0, [pc, #172]	@ (8000898 <HAL_ADC_MspInit+0x19c>)
 80007ea:	f002 f87b 	bl	80028e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80007ee:	2309      	movs	r3, #9
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f2:	2303      	movs	r3, #3
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	4826      	ldr	r0, [pc, #152]	@ (800089c <HAL_ADC_MspInit+0x1a0>)
 8000802:	f002 f86f 	bl	80028e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000806:	2308      	movs	r3, #8
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080a:	2303      	movs	r3, #3
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	481d      	ldr	r0, [pc, #116]	@ (8000890 <HAL_ADC_MspInit+0x194>)
 800081a:	f002 f863 	bl	80028e4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000820:	4a20      	ldr	r2, [pc, #128]	@ (80008a4 <HAL_ADC_MspInit+0x1a8>)
 8000822:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000826:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800082a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 800083a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000842:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000846:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 800084a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800084e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000850:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000856:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000864:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000866:	f001 fcc5 	bl	80021f4 <HAL_DMA_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_ADC_MspInit+0x178>
      Error_Handler();
 8000870:	f000 faa6 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 8000878:	639a      	str	r2, [r3, #56]	@ 0x38
 800087a:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <HAL_ADC_MspInit+0x1a4>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	@ 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40012000 	.word	0x40012000
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40012200 	.word	0x40012200
 8000898:	40021400 	.word	0x40021400
 800089c:	40020800 	.word	0x40020800
 80008a0:	2000010c 	.word	0x2000010c
 80008a4:	40026410 	.word	0x40026410

080008a8 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008ae:	4a17      	ldr	r2, [pc, #92]	@ (800090c <MX_CAN3_Init+0x64>)
 80008b0:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 16;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008c4:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008de:	2200      	movs	r2, #0
 80008e0:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_CAN3_Init+0x60>)
 80008f6:	f001 fa6f 	bl	8001dd8 <HAL_CAN_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_CAN3_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 fa5e 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000016c 	.word	0x2000016c
 800090c:	40003400 	.word	0x40003400

08000910 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <HAL_CAN_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d127      	bne.n	8000982 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <HAL_CAN_MspInit+0x80>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <HAL_CAN_MspInit+0x80>)
 8000938:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_CAN_MspInit+0x80>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <HAL_CAN_MspInit+0x80>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <HAL_CAN_MspInit+0x80>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_CAN_MspInit+0x80>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PB3     ------> CAN3_RX
    PB4     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000962:	2318      	movs	r3, #24
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000972:	230b      	movs	r3, #11
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <HAL_CAN_MspInit+0x84>)
 800097e:	f001 ffb1 	bl	80028e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	@ 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40003400 	.word	0x40003400
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400

08000998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_DMA_Init+0x38>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <MX_DMA_Init+0x38>)
 80009a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_DMA_Init+0x38>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2038      	movs	r0, #56	@ 0x38
 80009bc:	f001 fbe3 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009c0:	2038      	movs	r0, #56	@ 0x38
 80009c2:	f001 fbfc 	bl	80021be <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	4b9e      	ldr	r3, [pc, #632]	@ (8000c64 <MX_GPIO_Init+0x290>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a9d      	ldr	r2, [pc, #628]	@ (8000c64 <MX_GPIO_Init+0x290>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b9b      	ldr	r3, [pc, #620]	@ (8000c64 <MX_GPIO_Init+0x290>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	623b      	str	r3, [r7, #32]
 8000a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b98      	ldr	r3, [pc, #608]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a97      	ldr	r2, [pc, #604]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b95      	ldr	r3, [pc, #596]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	4b92      	ldr	r3, [pc, #584]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a91      	ldr	r2, [pc, #580]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b8f      	ldr	r3, [pc, #572]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b8c      	ldr	r3, [pc, #560]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a8b      	ldr	r2, [pc, #556]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b89      	ldr	r3, [pc, #548]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b86      	ldr	r3, [pc, #536]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a85      	ldr	r2, [pc, #532]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b83      	ldr	r3, [pc, #524]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b80      	ldr	r3, [pc, #512]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a7f      	ldr	r2, [pc, #508]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a79      	ldr	r2, [pc, #484]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b77      	ldr	r3, [pc, #476]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	4b74      	ldr	r3, [pc, #464]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a73      	ldr	r2, [pc, #460]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b71      	ldr	r3, [pc, #452]	@ (8000c64 <MX_GPIO_Init+0x290>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	486e      	ldr	r0, [pc, #440]	@ (8000c68 <MX_GPIO_Init+0x294>)
 8000ab0:	f002 f8c4 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	486c      	ldr	r0, [pc, #432]	@ (8000c6c <MX_GPIO_Init+0x298>)
 8000aba:	f002 f8bf 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ac4:	486a      	ldr	r0, [pc, #424]	@ (8000c70 <MX_GPIO_Init+0x29c>)
 8000ac6:	f002 f8b9 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2142      	movs	r1, #66	@ 0x42
 8000ace:	4869      	ldr	r0, [pc, #420]	@ (8000c74 <MX_GPIO_Init+0x2a0>)
 8000ad0:	f002 f8b4 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	485f      	ldr	r0, [pc, #380]	@ (8000c68 <MX_GPIO_Init+0x294>)
 8000aec:	f001 fefa 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	485c      	ldr	r0, [pc, #368]	@ (8000c78 <MX_GPIO_Init+0x2a4>)
 8000b08:	f001 feec 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4852      	ldr	r0, [pc, #328]	@ (8000c6c <MX_GPIO_Init+0x298>)
 8000b24:	f001 fede 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b28:	2332      	movs	r3, #50	@ 0x32
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	484d      	ldr	r0, [pc, #308]	@ (8000c78 <MX_GPIO_Init+0x2a4>)
 8000b44:	f001 fece 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b48:	2386      	movs	r3, #134	@ 0x86
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4846      	ldr	r0, [pc, #280]	@ (8000c7c <MX_GPIO_Init+0x2a8>)
 8000b64:	f001 febe 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b68:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483b      	ldr	r0, [pc, #236]	@ (8000c70 <MX_GPIO_Init+0x29c>)
 8000b82:	f001 feaf 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000b86:	2342      	movs	r3, #66	@ 0x42
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4835      	ldr	r0, [pc, #212]	@ (8000c74 <MX_GPIO_Init+0x2a0>)
 8000b9e:	f001 fea1 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb4:	230b      	movs	r3, #11
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	482c      	ldr	r0, [pc, #176]	@ (8000c70 <MX_GPIO_Init+0x29c>)
 8000bc0:	f001 fe90 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4827      	ldr	r0, [pc, #156]	@ (8000c80 <MX_GPIO_Init+0x2ac>)
 8000be2:	f001 fe7f 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481e      	ldr	r0, [pc, #120]	@ (8000c74 <MX_GPIO_Init+0x2a0>)
 8000bfa:	f001 fe73 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bfe:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c10:	230a      	movs	r3, #10
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4818      	ldr	r0, [pc, #96]	@ (8000c7c <MX_GPIO_Init+0x2a8>)
 8000c1c:	f001 fe62 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4811      	ldr	r0, [pc, #68]	@ (8000c7c <MX_GPIO_Init+0x2a8>)
 8000c36:	f001 fe55 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c3a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_GPIO_Init+0x2a0>)
 8000c58:	f001 fe44 	bl	80028e4 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	@ 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40021800 	.word	0x40021800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 fbf7 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f826 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f7ff fea0 	bl	80009d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c94:	f7ff fe80 	bl	8000998 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c98:	f7ff fc46 	bl	8000528 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000c9c:	f7ff fc96 	bl	80005cc <MX_ADC3_Init>
  MX_CAN3_Init();
 8000ca0:	f7ff fe02 	bl	80008a8 <MX_CAN3_Init>
  MX_TIM3_Init();
 8000ca4:	f000 fa3e 	bl	8001124 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ca8:	f000 fab4 	bl	8001214 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, adc_data, NUM_MUX);
 8000cac:	2206      	movs	r2, #6
 8000cae:	4907      	ldr	r1, [pc, #28]	@ (8000ccc <main+0x48>)
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <main+0x4c>)
 8000cb2:	f000 fca7 	bl	8001604 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  measureTempADC(temp_average, adc_data, temp_data);
 8000cb6:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <main+0x50>)
 8000cb8:	4904      	ldr	r1, [pc, #16]	@ (8000ccc <main+0x48>)
 8000cba:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <main+0x54>)
 8000cbc:	f000 f9c0 	bl	8001040 <measureTempADC>
	  //Code for sending CAN message
	  HAL_Delay(SAMPLE_DELAY);
 8000cc0:	200a      	movs	r0, #10
 8000cc2:	f000 fc37 	bl	8001534 <HAL_Delay>
	  measureTempADC(temp_average, adc_data, temp_data);
 8000cc6:	bf00      	nop
 8000cc8:	e7f5      	b.n	8000cb6 <main+0x32>
 8000cca:	bf00      	nop
 8000ccc:	20000194 	.word	0x20000194
 8000cd0:	200000c4 	.word	0x200000c4
 8000cd4:	200001c4 	.word	0x200001c4
 8000cd8:	200001ac 	.word	0x200001ac

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	@ 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2234      	movs	r2, #52	@ 0x34
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fb7c 	bl	80043e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d00:	f001 ffb6 	bl	8002c70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <SystemClock_Config+0xdc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a2b      	ldr	r2, [pc, #172]	@ (8000db8 <SystemClock_Config+0xdc>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <SystemClock_Config+0xdc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <SystemClock_Config+0xe0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d24:	4a25      	ldr	r2, [pc, #148]	@ (8000dbc <SystemClock_Config+0xe0>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <SystemClock_Config+0xe0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d3c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d50:	2360      	movs	r3, #96	@ 0x60
 8000d52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 ffe3 	bl	8002d30 <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d70:	f000 f826 	bl	8000dc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d74:	f001 ff8c 	bl	8002c90 <HAL_PWREx_EnableOverDrive>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d7e:	f000 f81f 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2302      	movs	r3, #2
 8000d88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fa74 	bl	800328c <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000daa:	f000 f809 	bl	8000dc0 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3750      	adds	r7, #80	@ 0x50
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 fb43 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <DMA2_Stream0_IRQHandler+0x10>)
 8000e7a:	f001 fac9 	bl	8002410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000010c 	.word	0x2000010c

08000e88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <enqueue>:
//Function: Adds temperature sample to array stored in memory and updates final average temperature table
//Inputs:   temp_average(old array of average temperatures for each MUX over n samples),
//          temp_snapshot(array containing 1 sample of MUX temperature data),
//          temp_data(array stored in memory containing past n temperature samples)
//Outputs:  average_mux_temp(updated array of average temperatures for each MUX over n samples), temp_data(modified temperature array)
void enqueue(uint32_t *temp_average, uint32_t temp_snapshot[NUM_MUX], uint32_t *temp_data[NUM_MUX]) {
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	rear = (rear + 1) % NUM_SAMPLES;
 8000eb8:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <enqueue+0xd4>)
 8000eba:	f993 3000 	ldrsb.w	r3, [r3]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <enqueue+0xd8>)
 8000ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	2132      	movs	r1, #50	@ 0x32
 8000ecc:	fb01 f303 	mul.w	r3, r1, r3
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <enqueue+0xd4>)
 8000ed6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0U; i < NUM_MUX; ++i){
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75fb      	strb	r3, [r7, #23]
 8000edc:	e046      	b.n	8000f6c <enqueue+0xc0>
		temp_average[i] -= temp_data[rear][i] / NUM_SAMPLES;
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <enqueue+0xd4>)
 8000eea:	f993 3000 	ldrsb.w	r3, [r3]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <enqueue+0xd8>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	091a      	lsrs	r2, r3, #4
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	4403      	add	r3, r0
 8000f0e:	1a8a      	subs	r2, r1, r2
 8000f10:	601a      	str	r2, [r3, #0]
		temp_data[rear][i] = temp_snapshot[i];
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	441a      	add	r2, r3
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <enqueue+0xd4>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	440b      	add	r3, r1
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	601a      	str	r2, [r3, #0]
		temp_average[i] += temp_data[rear][i] / NUM_SAMPLES;
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <enqueue+0xd4>)
 8000f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <enqueue+0xd8>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	091a      	lsrs	r2, r3, #4
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	4403      	add	r3, r0
 8000f62:	440a      	add	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0U; i < NUM_MUX; ++i){
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	75fb      	strb	r3, [r7, #23]
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	d9b5      	bls.n	8000ede <enqueue+0x32>
	}
	return;
 8000f72:	bf00      	nop
}
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000004 	.word	0x20000004
 8000f84:	51eb851f 	.word	0x51eb851f

08000f88 <calculateTemperature>:

//Function: Calculates thermistor value in resistance and converts to degrees C using the Steinhart-Hart equation
//Inputs:   adc_data(reading from the ADC)
//Outputs:  tempSteinhart(temperature in degrees C)
uint32_t calculateTemperature (uint32_t adc_data) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	//Convert the ADC value being read into a resistance.
	//R = 8250 / (4096 / (ADC*GainTranslation) - 1)
	uint32_t voltage_out = adc_data * VOLTAGE_SUPPLY / 4095U;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f9a:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 8000f9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fa2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8001028 <calculateTemperature+0xa0>
 8000fa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000faa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	617b      	str	r3, [r7, #20]
	uint32_t thermistor_resistance = voltage_out * R10K / (VOLTAGE_SUPPLY - voltage_out);
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fd0:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 8000fd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fd8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe0:	ee17 3a90 	vmov	r3, s15
 8000fe4:	613b      	str	r3, [r7, #16]

	//Calculates Temperature from Resistance of thermistor using the Simplified B parameter Steinhart Equation.
	//1/Temp = 1/NominalTemp + (1/B)*1n(Thermistor Resistance/NominalResistance)
	uint32_t temp_steinhart = -ABSOLUTE_ZERO + (1.0/((1.0/ (NOMINAL_TEMPERATURE + ABSOLUTE_ZERO)) + (log(thermistor_resistance / NOMINAL_RESISTANCE) / B_COEFFICIENT)));
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ff4:	f003 fa2c 	bl	8004450 <log>
 8000ff8:	eeb0 7b40 	vmov.f64	d7, d0
 8000ffc:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001030 <calculateTemperature+0xa8>
 8001000:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001004:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001008:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800100c:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001038 <calculateTemperature+0xb0>
 8001010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001014:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001018:	ee17 3a90 	vmov	r3, s15
 800101c:	60fb      	str	r3, [r7, #12]
	return temp_steinhart;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	00000000 	.word	0x00000000
 800102c:	40affe00 	.word	0x40affe00
 8001030:	d2922395 	.word	0xd2922395
 8001034:	3f6de1a6 	.word	0x3f6de1a6
 8001038:	66666666 	.word	0x66666666
 800103c:	40711266 	.word	0x40711266

08001040 <measureTempADC>:
//Inputs:   adc_data(array containing measured values from ADCs),
//          temp_data(array stored in memory containing past n temperature samples),
//          temp_average(array containing average multiplexor temperature)
//Outputs:  temp_data(modified temperature array)
void measureTempADC(uint32_t *temp_average, uint32_t *adc_data, uint32_t *temp_data[NUM_MUX])
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	@ 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	uint32_t temp_snapshot[NUM_MUX] = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
	for(uint8_t i = 0U; i < NUM_THERM_PER_MUX; ++i){
 800105e:	2300      	movs	r3, #0
 8001060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001064:	e04d      	b.n	8001102 <measureTempADC+0xc2>
		//Increment orientation of MUX control lines.
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, i & 0x1);
 8001066:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	2101      	movs	r1, #1
 8001074:	482a      	ldr	r0, [pc, #168]	@ (8001120 <measureTempADC+0xe0>)
 8001076:	f001 fde1 	bl	8002c3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, i >> 1 & 0x1);
 800107a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	2102      	movs	r1, #2
 800108c:	4824      	ldr	r0, [pc, #144]	@ (8001120 <measureTempADC+0xe0>)
 800108e:	f001 fdd5 	bl	8002c3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, i >> 2 & 0x1);
 8001092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	2104      	movs	r1, #4
 80010a4:	481e      	ldr	r0, [pc, #120]	@ (8001120 <measureTempADC+0xe0>)
 80010a6:	f001 fdc9 	bl	8002c3c <HAL_GPIO_WritePin>

		//Record average temperature of each MUX.
		for(uint8_t i = 0U; i < NUM_MUX; ++i){
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80010b0:	e01e      	b.n	80010f0 <measureTempADC+0xb0>
			temp_snapshot[i] += calculateTemperature(adc_data[i]) / NUM_THERM_PER_MUX;
 80010b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff62 	bl	8000f88 <calculateTemperature>
 80010c4:	4603      	mov	r3, r0
 80010c6:	08d9      	lsrs	r1, r3, #3
 80010c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	3330      	adds	r3, #48	@ 0x30
 80010d0:	443b      	add	r3, r7
 80010d2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80010d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80010da:	440a      	add	r2, r1
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	3330      	adds	r3, #48	@ 0x30
 80010e0:	443b      	add	r3, r7
 80010e2:	f843 2c1c 	str.w	r2, [r3, #-28]
		for(uint8_t i = 0U; i < NUM_MUX; ++i){
 80010e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80010ea:	3301      	adds	r3, #1
 80010ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80010f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d9dc      	bls.n	80010b2 <measureTempADC+0x72>
	for(uint8_t i = 0U; i < NUM_THERM_PER_MUX; ++i){
 80010f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001102:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001106:	2b07      	cmp	r3, #7
 8001108:	d9ad      	bls.n	8001066 <measureTempADC+0x26>
		}
	}
	enqueue(temp_average, temp_snapshot, temp_data);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4619      	mov	r1, r3
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff feca 	bl	8000eac <enqueue>
	return;
 8001118:	bf00      	nop
}
 800111a:	3730      	adds	r7, #48	@ 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021400 	.word	0x40021400

08001124 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001156:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <MX_TIM3_Init+0xe8>)
 8001158:	4a2d      	ldr	r2, [pc, #180]	@ (8001210 <MX_TIM3_Init+0xec>)
 800115a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800115c:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <MX_TIM3_Init+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <MX_TIM3_Init+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001168:	4b28      	ldr	r3, [pc, #160]	@ (800120c <MX_TIM3_Init+0xe8>)
 800116a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800116e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b26      	ldr	r3, [pc, #152]	@ (800120c <MX_TIM3_Init+0xe8>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b25      	ldr	r3, [pc, #148]	@ (800120c <MX_TIM3_Init+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800117c:	4823      	ldr	r0, [pc, #140]	@ (800120c <MX_TIM3_Init+0xe8>)
 800117e:	f002 fa77 	bl	8003670 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001188:	f7ff fe1a 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001196:	4619      	mov	r1, r3
 8001198:	481c      	ldr	r0, [pc, #112]	@ (800120c <MX_TIM3_Init+0xe8>)
 800119a:	f002 fc35 	bl	8003a08 <HAL_TIM_ConfigClockSource>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011a4:	f7ff fe0c 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011a8:	4818      	ldr	r0, [pc, #96]	@ (800120c <MX_TIM3_Init+0xe8>)
 80011aa:	f002 fab8 	bl	800371e <HAL_TIM_PWM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011b4:	f7ff fe04 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4811      	ldr	r0, [pc, #68]	@ (800120c <MX_TIM3_Init+0xe8>)
 80011c8:	f003 f880 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011d2:	f7ff fdf5 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	@ 0x60
 80011d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	@ (800120c <MX_TIM3_Init+0xe8>)
 80011ee:	f002 faf7 	bl	80037e0 <HAL_TIM_PWM_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011f8:	f7ff fde2 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <MX_TIM3_Init+0xe8>)
 80011fe:	f000 f8b5 	bl	800136c <HAL_TIM_MspPostInit>

}
 8001202:	bf00      	nop
 8001204:	3738      	adds	r7, #56	@ 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000674 	.word	0x20000674
 8001210:	40000400 	.word	0x40000400

08001214 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	@ 0x38
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <MX_TIM4_Init+0xe8>)
 8001248:	4a2d      	ldr	r2, [pc, #180]	@ (8001300 <MX_TIM4_Init+0xec>)
 800124a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800124c:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <MX_TIM4_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <MX_TIM4_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <MX_TIM4_Init+0xe8>)
 800125a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800125e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <MX_TIM4_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <MX_TIM4_Init+0xe8>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800126c:	4823      	ldr	r0, [pc, #140]	@ (80012fc <MX_TIM4_Init+0xe8>)
 800126e:	f002 f9ff 	bl	8003670 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001278:	f7ff fda2 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001286:	4619      	mov	r1, r3
 8001288:	481c      	ldr	r0, [pc, #112]	@ (80012fc <MX_TIM4_Init+0xe8>)
 800128a:	f002 fbbd 	bl	8003a08 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001294:	f7ff fd94 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001298:	4818      	ldr	r0, [pc, #96]	@ (80012fc <MX_TIM4_Init+0xe8>)
 800129a:	f002 fa40 	bl	800371e <HAL_TIM_PWM_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012a4:	f7ff fd8c 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	@ (80012fc <MX_TIM4_Init+0xe8>)
 80012b8:	f003 f808 	bl	80042cc <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012c2:	f7ff fd7d 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	@ 0x60
 80012c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	@ (80012fc <MX_TIM4_Init+0xe8>)
 80012de:	f002 fa7f 	bl	80037e0 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012e8:	f7ff fd6a 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <MX_TIM4_Init+0xe8>)
 80012ee:	f000 f83d 	bl	800136c <HAL_TIM_MspPostInit>

}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	@ 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200006c0 	.word	0x200006c0
 8001300:	40000800 	.word	0x40000800

08001304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <HAL_TIM_Base_MspInit+0x5c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10c      	bne.n	8001330 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001316:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <HAL_TIM_Base_MspInit+0x60>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <HAL_TIM_Base_MspInit+0x60>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_TIM_Base_MspInit+0x60>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800132e:	e010      	b.n	8001352 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <HAL_TIM_Base_MspInit+0x64>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10b      	bne.n	8001352 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_TIM_Base_MspInit+0x60>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <HAL_TIM_Base_MspInit+0x60>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <HAL_TIM_Base_MspInit+0x60>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40000400 	.word	0x40000400
 8001364:	40023800 	.word	0x40023800
 8001368:	40000800 	.word	0x40000800

0800136c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a22      	ldr	r2, [pc, #136]	@ (8001414 <HAL_TIM_MspPostInit+0xa8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d11c      	bne.n	80013c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <HAL_TIM_MspPostInit+0xac>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a21      	ldr	r2, [pc, #132]	@ (8001418 <HAL_TIM_MspPostInit+0xac>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <HAL_TIM_MspPostInit+0xac>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a6:	2340      	movs	r3, #64	@ 0x40
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013b6:	2302      	movs	r3, #2
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4816      	ldr	r0, [pc, #88]	@ (800141c <HAL_TIM_MspPostInit+0xb0>)
 80013c2:	f001 fa8f 	bl	80028e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013c6:	e021      	b.n	800140c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <HAL_TIM_MspPostInit+0xb4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11c      	bne.n	800140c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_TIM_MspPostInit+0xac>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a10      	ldr	r2, [pc, #64]	@ (8001418 <HAL_TIM_MspPostInit+0xac>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_TIM_MspPostInit+0xac>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013fc:	2302      	movs	r3, #2
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <HAL_TIM_MspPostInit+0xb8>)
 8001408:	f001 fa6c 	bl	80028e4 <HAL_GPIO_Init>
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40000400 	.word	0x40000400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40000800 	.word	0x40000800
 8001424:	40020400 	.word	0x40020400

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	@ (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	@ (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	@ (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	@ (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff fd19 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f002 ffd5 	bl	8004404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fc13 	bl	8000c84 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800146c:	08004f78 	.word	0x08004f78
  ldr r2, =_sbss
 8001470:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001474:	20000848 	.word	0x20000848

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>

0800147a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 fe76 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f805 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148a:	f7ff fc9f 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fe91 	bl	80021da <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 fe59 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	20000008 	.word	0x20000008

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000000c 	.word	0x2000000c
 8001518:	2000070c 	.word	0x2000070c

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000070c 	.word	0x2000070c

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000000c 	.word	0x2000000c

0800157c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e031      	b.n	80015f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff f8ae 	bl	80006fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d116      	bne.n	80015e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_ADC_Init+0x84>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	f043 0202 	orr.w	r2, r3, #2
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fa88 	bl	8001ae0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80015e6:	e001      	b.n	80015ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	ffffeefd 	.word	0xffffeefd

08001604 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_ADC_Start_DMA+0x1e>
 800161e:	2302      	movs	r3, #2
 8001620:	e0d4      	b.n	80017cc <HAL_ADC_Start_DMA+0x1c8>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b01      	cmp	r3, #1
 8001636:	d018      	beq.n	800166a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001648:	4b62      	ldr	r3, [pc, #392]	@ (80017d4 <HAL_ADC_Start_DMA+0x1d0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a62      	ldr	r2, [pc, #392]	@ (80017d8 <HAL_ADC_Start_DMA+0x1d4>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0c9a      	lsrs	r2, r3, #18
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800165c:	e002      	b.n	8001664 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3b01      	subs	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b01      	cmp	r3, #1
 8001676:	f040 809c 	bne.w	80017b2 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800167e:	4b57      	ldr	r3, [pc, #348]	@ (80017dc <HAL_ADC_Start_DMA+0x1d8>)
 8001680:	4013      	ands	r3, r2
 8001682:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016b4:	d106      	bne.n	80016c4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	f023 0206 	bic.w	r2, r3, #6
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80016c2:	e002      	b.n	80016ca <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d6:	4a42      	ldr	r2, [pc, #264]	@ (80017e0 <HAL_ADC_Start_DMA+0x1dc>)
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	4a41      	ldr	r2, [pc, #260]	@ (80017e4 <HAL_ADC_Start_DMA+0x1e0>)
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e6:	4a40      	ldr	r2, [pc, #256]	@ (80017e8 <HAL_ADC_Start_DMA+0x1e4>)
 80016e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001702:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001712:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	334c      	adds	r3, #76	@ 0x4c
 800171e:	4619      	mov	r1, r3
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f000 fe14 	bl	8002350 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <HAL_ADC_Start_DMA+0x1e8>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10f      	bne.n	8001754 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d143      	bne.n	80017ca <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	e03a      	b.n	80017ca <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a25      	ldr	r2, [pc, #148]	@ (80017f0 <HAL_ADC_Start_DMA+0x1ec>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10e      	bne.n	800177c <HAL_ADC_Start_DMA+0x178>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d107      	bne.n	800177c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800177a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_ADC_Start_DMA+0x1e8>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d120      	bne.n	80017ca <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	@ (80017f4 <HAL_ADC_Start_DMA+0x1f0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d11b      	bne.n	80017ca <HAL_ADC_Start_DMA+0x1c6>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d114      	bne.n	80017ca <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	e00b      	b.n	80017ca <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000000 	.word	0x20000000
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	fffff8fe 	.word	0xfffff8fe
 80017e0:	08001cd5 	.word	0x08001cd5
 80017e4:	08001d8f 	.word	0x08001d8f
 80017e8:	08001dab 	.word	0x08001dab
 80017ec:	40012300 	.word	0x40012300
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40012200 	.word	0x40012200

080017f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1c>
 800184c:	2302      	movs	r3, #2
 800184e:	e136      	b.n	8001abe <HAL_ADC_ConfigChannel+0x28a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b09      	cmp	r3, #9
 800185e:	d93a      	bls.n	80018d6 <HAL_ADC_ConfigChannel+0xa2>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001868:	d035      	beq.n	80018d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68d9      	ldr	r1, [r3, #12]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	3b1e      	subs	r3, #30
 8001880:	2207      	movs	r2, #7
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a8d      	ldr	r2, [pc, #564]	@ (8001acc <HAL_ADC_ConfigChannel+0x298>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10a      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68d9      	ldr	r1, [r3, #12]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	061a      	lsls	r2, r3, #24
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ae:	e035      	b.n	800191c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68d9      	ldr	r1, [r3, #12]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4403      	add	r3, r0
 80018c8:	3b1e      	subs	r3, #30
 80018ca:	409a      	lsls	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018d4:	e022      	b.n	800191c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6919      	ldr	r1, [r3, #16]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	2207      	movs	r2, #7
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43da      	mvns	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	400a      	ands	r2, r1
 80018f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6919      	ldr	r1, [r3, #16]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	4603      	mov	r3, r0
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4403      	add	r3, r0
 8001912:	409a      	lsls	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b06      	cmp	r3, #6
 8001922:	d824      	bhi.n	800196e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3b05      	subs	r3, #5
 8001936:	221f      	movs	r2, #31
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43da      	mvns	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	400a      	ands	r2, r1
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b05      	subs	r3, #5
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34
 800196c:	e04c      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d824      	bhi.n	80019c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b23      	subs	r3, #35	@ 0x23
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b23      	subs	r3, #35	@ 0x23
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80019be:	e023      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	3b41      	subs	r3, #65	@ 0x41
 80019d2:	221f      	movs	r2, #31
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43da      	mvns	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	400a      	ands	r2, r1
 80019e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b41      	subs	r3, #65	@ 0x41
 80019fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a30      	ldr	r2, [pc, #192]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x29c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1f4>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a1a:	d105      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a22:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x29c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10f      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x21e>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d10b      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a25      	ldr	r2, [pc, #148]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a44:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a46:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x29c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d12b      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x280>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1a      	ldr	r2, [pc, #104]	@ (8001acc <HAL_ADC_ConfigChannel+0x298>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d003      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x23a>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b11      	cmp	r3, #17
 8001a6c:	d122      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a18      	ldr	r2, [pc, #96]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a74:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a78:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	@ (8001acc <HAL_ADC_ConfigChannel+0x298>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a11      	ldr	r2, [pc, #68]	@ (8001adc <HAL_ADC_ConfigChannel+0x2a8>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9a      	lsrs	r2, r3, #18
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aa6:	e002      	b.n	8001aae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	10000012 	.word	0x10000012
 8001ad0:	40012000 	.word	0x40012000
 8001ad4:	40012300 	.word	0x40012300
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83

08001ae0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae8:	4b78      	ldr	r3, [pc, #480]	@ (8001ccc <ADC_Init+0x1ec>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a77      	ldr	r2, [pc, #476]	@ (8001ccc <ADC_Init+0x1ec>)
 8001aee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001af2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001af4:	4b75      	ldr	r3, [pc, #468]	@ (8001ccc <ADC_Init+0x1ec>)
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4973      	ldr	r1, [pc, #460]	@ (8001ccc <ADC_Init+0x1ec>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	021a      	lsls	r2, r3, #8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6899      	ldr	r1, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6e:	4a58      	ldr	r2, [pc, #352]	@ (8001cd0 <ADC_Init+0x1f0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6899      	ldr	r1, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e00f      	b.n	8001bda <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0202 	bic.w	r2, r2, #2
 8001be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	005a      	lsls	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01b      	beq.n	8001c40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	035a      	lsls	r2, r3, #13
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	e007      	b.n	8001c50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	051a      	lsls	r2, r3, #20
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c92:	025a      	lsls	r2, r3, #9
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	029a      	lsls	r2, r3, #10
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	609a      	str	r2, [r3, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40012300 	.word	0x40012300
 8001cd0:	0f000001 	.word	0x0f000001

08001cd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d13c      	bne.n	8001d68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12b      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d127      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d119      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0220 	bic.w	r2, r2, #32
 8001d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff fd49 	bl	80017f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d66:	e00e      	b.n	8001d86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fd53 	bl	8001820 <HAL_ADC_ErrorCallback>
}
 8001d7a:	e004      	b.n	8001d86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fd35 	bl	800180c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2240      	movs	r2, #64	@ 0x40
 8001dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fd28 	bl	8001820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0ed      	b.n	8001fc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fd8a 	bl	8000910 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0c:	f7ff fb86 	bl	800151c <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e12:	e012      	b.n	8001e3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e14:	f7ff fb82 	bl	800151c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b0a      	cmp	r3, #10
 8001e20:	d90b      	bls.n	8001e3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2205      	movs	r2, #5
 8001e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0c5      	b.n	8001fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0e5      	beq.n	8001e14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0202 	bic.w	r2, r2, #2
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e58:	f7ff fb60 	bl	800151c <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e5e:	e012      	b.n	8001e86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e60:	f7ff fb5c 	bl	800151c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d90b      	bls.n	8001e86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e09f      	b.n	8001fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e5      	bne.n	8001e60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e1b      	ldrb	r3, [r3, #24]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e007      	b.n	8001ebe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7e5b      	ldrb	r3, [r3, #25]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e007      	b.n	8001ee8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e9b      	ldrb	r3, [r3, #26]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d108      	bne.n	8001f02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e007      	b.n	8001f12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0220 	bic.w	r2, r2, #32
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7edb      	ldrb	r3, [r3, #27]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0210 	bic.w	r2, r2, #16
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0210 	orr.w	r2, r2, #16
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7f1b      	ldrb	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0208 	bic.w	r2, r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7f5b      	ldrb	r3, [r3, #29]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d108      	bne.n	8001f80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0204 	orr.w	r2, r2, #4
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <__NVIC_SetPriorityGrouping+0x40>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <__NVIC_SetPriorityGrouping+0x40>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00
 8002014:	05fa0000 	.word	0x05fa0000

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	@ (800206c <__NVIC_EnableIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	@ (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	@ (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff8e 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff29 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff3e 	bl	8002018 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff8e 	bl	80020c4 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff31 	bl	8002034 <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffa2 	bl	800212c <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff f98c 	bl	800151c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e099      	b.n	8002344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	e00f      	b.n	8002252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002232:	f7ff f973 	bl	800151c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b05      	cmp	r3, #5
 800223e:	d908      	bls.n	8002252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e078      	b.n	8002344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e8      	bne.n	8002232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4b38      	ldr	r3, [pc, #224]	@ (800234c <HAL_DMA_Init+0x158>)
 800226c:	4013      	ands	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	4313      	orrs	r3, r2
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d117      	bne.n	8002316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fa77 	bl	80027ec <DMA_CheckFifoParam>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002312:	2301      	movs	r3, #1
 8002314:	e016      	b.n	8002344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa2e 	bl	8002780 <DMA_CalcBaseAndBitshift>
 8002324:	4603      	mov	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	223f      	movs	r2, #63	@ 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	e010803f 	.word	0xe010803f

08002350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Start_IT+0x26>
 8002372:	2302      	movs	r3, #2
 8002374:	e048      	b.n	8002408 <HAL_DMA_Start_IT+0xb8>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d137      	bne.n	80023fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f9c0 	bl	8002724 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0216 	orr.w	r2, r2, #22
 80023be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e005      	b.n	8002406 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002406:	7dfb      	ldrb	r3, [r7, #23]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800241c:	4b8e      	ldr	r3, [pc, #568]	@ (8002658 <HAL_DMA_IRQHandler+0x248>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a8e      	ldr	r2, [pc, #568]	@ (800265c <HAL_DMA_IRQHandler+0x24c>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	2208      	movs	r2, #8
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01a      	beq.n	800247c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0204 	bic.w	r2, r2, #4
 8002462:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	2208      	movs	r2, #8
 800246a:	409a      	lsls	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	2201      	movs	r2, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d012      	beq.n	80024b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	2201      	movs	r2, #1
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	f043 0202 	orr.w	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b6:	2204      	movs	r2, #4
 80024b8:	409a      	lsls	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d012      	beq.n	80024e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	2204      	movs	r2, #4
 80024d6:	409a      	lsls	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	f043 0204 	orr.w	r2, r3, #4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ec:	2210      	movs	r2, #16
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d043      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03c      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	2210      	movs	r2, #16
 800250c:	409a      	lsls	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d018      	beq.n	8002552 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d024      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
 800253e:	e01f      	b.n	8002580 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
 8002550:	e016      	b.n	8002580 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0208 	bic.w	r2, r2, #8
 800256e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	2220      	movs	r2, #32
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 808f 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8087 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	2220      	movs	r2, #32
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d136      	bne.n	8002628 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0216 	bic.w	r2, r2, #22
 80025c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <HAL_DMA_IRQHandler+0x1da>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0208 	bic.w	r2, r2, #8
 80025f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	223f      	movs	r2, #63	@ 0x3f
 8002600:	409a      	lsls	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07e      	beq.n	800271c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
        }
        return;
 8002626:	e079      	b.n	800271c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01d      	beq.n	8002672 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	2b00      	cmp	r3, #0
 800264a:	d031      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e02c      	b.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000
 800265c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e01e      	b.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d032      	beq.n	800271e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d022      	beq.n	800270a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2205      	movs	r2, #5
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3301      	adds	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d307      	bcc.n	80026f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f2      	bne.n	80026dc <HAL_DMA_IRQHandler+0x2cc>
 80026f6:	e000      	b.n	80026fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
 800271a:	e000      	b.n	800271e <HAL_DMA_IRQHandler+0x30e>
        return;
 800271c:	bf00      	nop
    }
  }
}
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002740:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b40      	cmp	r3, #64	@ 0x40
 8002750:	d108      	bne.n	8002764 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002762:	e007      	b.n	8002774 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3b10      	subs	r3, #16
 8002790:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <DMA_CalcBaseAndBitshift+0x60>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800279a:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <DMA_CalcBaseAndBitshift+0x64>)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d908      	bls.n	80027c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <DMA_CalcBaseAndBitshift+0x68>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	1d1a      	adds	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80027be:	e006      	b.n	80027ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <DMA_CalcBaseAndBitshift+0x68>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	aaaaaaab 	.word	0xaaaaaaab
 80027e4:	080046d0 	.word	0x080046d0
 80027e8:	fffffc00 	.word	0xfffffc00

080027ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11f      	bne.n	8002846 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d856      	bhi.n	80028ba <DMA_CheckFifoParam+0xce>
 800280c:	a201      	add	r2, pc, #4	@ (adr r2, 8002814 <DMA_CheckFifoParam+0x28>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	08002825 	.word	0x08002825
 8002818:	08002837 	.word	0x08002837
 800281c:	08002825 	.word	0x08002825
 8002820:	080028bb 	.word	0x080028bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d046      	beq.n	80028be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002834:	e043      	b.n	80028be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800283e:	d140      	bne.n	80028c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002844:	e03d      	b.n	80028c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800284e:	d121      	bne.n	8002894 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d837      	bhi.n	80028c6 <DMA_CheckFifoParam+0xda>
 8002856:	a201      	add	r2, pc, #4	@ (adr r2, 800285c <DMA_CheckFifoParam+0x70>)
 8002858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285c:	0800286d 	.word	0x0800286d
 8002860:	08002873 	.word	0x08002873
 8002864:	0800286d 	.word	0x0800286d
 8002868:	08002885 	.word	0x08002885
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      break;
 8002870:	e030      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d025      	beq.n	80028ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002882:	e022      	b.n	80028ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800288c:	d11f      	bne.n	80028ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002892:	e01c      	b.n	80028ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d903      	bls.n	80028a2 <DMA_CheckFifoParam+0xb6>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d003      	beq.n	80028a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028a0:	e018      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      break;
 80028a6:	e015      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00e      	beq.n	80028d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      break;
 80028b8:	e00b      	b.n	80028d2 <DMA_CheckFifoParam+0xe6>
      break;
 80028ba:	bf00      	nop
 80028bc:	e00a      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028be:	bf00      	nop
 80028c0:	e008      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028c2:	bf00      	nop
 80028c4:	e006      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028c6:	bf00      	nop
 80028c8:	e004      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028ca:	bf00      	nop
 80028cc:	e002      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
    }
  } 
  
  return status; 
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e175      	b.n	8002bf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8164 	bne.w	8002bea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d005      	beq.n	800293a <HAL_GPIO_Init+0x56>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d130      	bne.n	800299c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002970:	2201      	movs	r2, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0201 	and.w	r2, r3, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d017      	beq.n	80029d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d123      	bne.n	8002a2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	08da      	lsrs	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3208      	adds	r2, #8
 80029ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80be 	beq.w	8002bea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	4b66      	ldr	r3, [pc, #408]	@ (8002c08 <HAL_GPIO_Init+0x324>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	4a65      	ldr	r2, [pc, #404]	@ (8002c08 <HAL_GPIO_Init+0x324>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a7a:	4b63      	ldr	r3, [pc, #396]	@ (8002c08 <HAL_GPIO_Init+0x324>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a86:	4a61      	ldr	r2, [pc, #388]	@ (8002c0c <HAL_GPIO_Init+0x328>)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a58      	ldr	r2, [pc, #352]	@ (8002c10 <HAL_GPIO_Init+0x32c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d037      	beq.n	8002b22 <HAL_GPIO_Init+0x23e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a57      	ldr	r2, [pc, #348]	@ (8002c14 <HAL_GPIO_Init+0x330>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d031      	beq.n	8002b1e <HAL_GPIO_Init+0x23a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a56      	ldr	r2, [pc, #344]	@ (8002c18 <HAL_GPIO_Init+0x334>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02b      	beq.n	8002b1a <HAL_GPIO_Init+0x236>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a55      	ldr	r2, [pc, #340]	@ (8002c1c <HAL_GPIO_Init+0x338>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d025      	beq.n	8002b16 <HAL_GPIO_Init+0x232>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a54      	ldr	r2, [pc, #336]	@ (8002c20 <HAL_GPIO_Init+0x33c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01f      	beq.n	8002b12 <HAL_GPIO_Init+0x22e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a53      	ldr	r2, [pc, #332]	@ (8002c24 <HAL_GPIO_Init+0x340>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_Init+0x22a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a52      	ldr	r2, [pc, #328]	@ (8002c28 <HAL_GPIO_Init+0x344>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x226>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a51      	ldr	r2, [pc, #324]	@ (8002c2c <HAL_GPIO_Init+0x348>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x222>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a50      	ldr	r2, [pc, #320]	@ (8002c30 <HAL_GPIO_Init+0x34c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x21e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4f      	ldr	r2, [pc, #316]	@ (8002c34 <HAL_GPIO_Init+0x350>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x21a>
 8002afa:	2309      	movs	r3, #9
 8002afc:	e012      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002afe:	230a      	movs	r3, #10
 8002b00:	e010      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b02:	2308      	movs	r3, #8
 8002b04:	e00e      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b06:	2307      	movs	r3, #7
 8002b08:	e00c      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	e00a      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b22:	2300      	movs	r3, #0
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b34:	4935      	ldr	r1, [pc, #212]	@ (8002c0c <HAL_GPIO_Init+0x328>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b42:	4b3d      	ldr	r3, [pc, #244]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b66:	4a34      	ldr	r2, [pc, #208]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b6c:	4b32      	ldr	r3, [pc, #200]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b90:	4a29      	ldr	r2, [pc, #164]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b96:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bba:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be4:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <HAL_GPIO_Init+0x354>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	f67f ae86 	bls.w	8002904 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40021400 	.word	0x40021400
 8002c28:	40021800 	.word	0x40021800
 8002c2c:	40021c00 	.word	0x40021c00
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40022400 	.word	0x40022400
 8002c38:	40013c00 	.word	0x40013c00

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a04      	ldr	r2, [pc, #16]	@ (8002c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	4a22      	ldr	r2, [pc, #136]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca6:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cbe:	f7fe fc2d 	bl	800151c <HAL_GetTick>
 8002cc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cc4:	e009      	b.n	8002cda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cc6:	f7fe fc29 	bl	800151c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cd4:	d901      	bls.n	8002cda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e022      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cda:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ce8:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0f      	ldr	r2, [pc, #60]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fc12 	bl	800151c <HAL_GetTick>
 8002cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cfa:	e009      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cfc:	f7fe fc0e 	bl	800151c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d0a:	d901      	bls.n	8002d10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e007      	b.n	8002d20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40007000 	.word	0x40007000

08002d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e29b      	b.n	800327e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8087 	beq.w	8002e62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d54:	4b96      	ldr	r3, [pc, #600]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d00c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d60:	4b93      	ldr	r3, [pc, #588]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d112      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62>
 8002d6c:	4b90      	ldr	r3, [pc, #576]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d78:	d10b      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d06c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x130>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d168      	bne.n	8002e60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e275      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x7a>
 8002d9c:	4b84      	ldr	r3, [pc, #528]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a83      	ldr	r2, [pc, #524]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e02e      	b.n	8002e08 <HAL_RCC_OscConfig+0xd8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x9c>
 8002db2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7b      	ldr	r2, [pc, #492]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xd8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0xc0>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a72      	ldr	r2, [pc, #456]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xd8>
 8002df0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6e      	ldr	r2, [pc, #440]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6b      	ldr	r2, [pc, #428]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe fb84 	bl	800151c <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe fb80 	bl	800151c <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	@ 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e229      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b61      	ldr	r3, [pc, #388]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xe8>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fb70 	bl	800151c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe fb6c 	bl	800151c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e215      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	4b57      	ldr	r3, [pc, #348]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x110>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d069      	beq.n	8002f42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6e:	4b50      	ldr	r3, [pc, #320]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x190>
 8002e86:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	4b47      	ldr	r3, [pc, #284]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_RCC_OscConfig+0x17a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1e9      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b41      	ldr	r3, [pc, #260]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	493d      	ldr	r1, [pc, #244]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	e040      	b.n	8002f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d023      	beq.n	8002f10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a38      	ldr	r2, [pc, #224]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fb22 	bl	800151c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fe fb1e 	bl	800151c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1c7      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b30      	ldr	r3, [pc, #192]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4929      	ldr	r1, [pc, #164]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
 8002f0e:	e018      	b.n	8002f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f10:	4b27      	ldr	r3, [pc, #156]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a26      	ldr	r2, [pc, #152]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fafe 	bl	800151c <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f24:	f7fe fafa 	bl	800151c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1a3      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d038      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d019      	beq.n	8002f8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	4a15      	ldr	r2, [pc, #84]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe fadb 	bl	800151c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fad7 	bl	800151c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e180      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x23a>
 8002f88:	e01a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8a:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8e:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <HAL_RCC_OscConfig+0x280>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f96:	f7fe fac1 	bl	800151c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fabd 	bl	800151c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d903      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e166      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
 8002fb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	4b92      	ldr	r3, [pc, #584]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a4 	beq.w	8003116 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b8c      	ldr	r3, [pc, #560]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b89      	ldr	r3, [pc, #548]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a88      	ldr	r2, [pc, #544]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b86      	ldr	r3, [pc, #536]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff6:	4b83      	ldr	r3, [pc, #524]	@ (8003204 <HAL_RCC_OscConfig+0x4d4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003002:	4b80      	ldr	r3, [pc, #512]	@ (8003204 <HAL_RCC_OscConfig+0x4d4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7f      	ldr	r2, [pc, #508]	@ (8003204 <HAL_RCC_OscConfig+0x4d4>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fe fa85 	bl	800151c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fe fa81 	bl	800151c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	@ 0x64
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e12a      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	4b76      	ldr	r3, [pc, #472]	@ (8003204 <HAL_RCC_OscConfig+0x4d4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x31a>
 800303c:	4b70      	ldr	r3, [pc, #448]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a6f      	ldr	r2, [pc, #444]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	e02d      	b.n	80030a6 <HAL_RCC_OscConfig+0x376>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x33c>
 8003052:	4b6b      	ldr	r3, [pc, #428]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a6a      	ldr	r2, [pc, #424]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	4b68      	ldr	r3, [pc, #416]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a67      	ldr	r2, [pc, #412]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
 800306a:	e01c      	b.n	80030a6 <HAL_RCC_OscConfig+0x376>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10c      	bne.n	800308e <HAL_RCC_OscConfig+0x35e>
 8003074:	4b62      	ldr	r3, [pc, #392]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	4a61      	ldr	r2, [pc, #388]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003080:	4b5f      	ldr	r3, [pc, #380]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a5e      	ldr	r2, [pc, #376]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0x376>
 800308e:	4b5c      	ldr	r3, [pc, #368]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	4a5b      	ldr	r2, [pc, #364]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6713      	str	r3, [r2, #112]	@ 0x70
 800309a:	4b59      	ldr	r3, [pc, #356]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	4a58      	ldr	r2, [pc, #352]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d015      	beq.n	80030da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe fa35 	bl	800151c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe fa31 	bl	800151c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0d8      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RCC_OscConfig+0x386>
 80030d8:	e014      	b.n	8003104 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fa1f 	bl	800151c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fa1b 	bl	800151c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0c2      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	4b41      	ldr	r3, [pc, #260]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ee      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b3d      	ldr	r3, [pc, #244]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	4a3c      	ldr	r2, [pc, #240]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80ae 	beq.w	800327c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003120:	4b37      	ldr	r3, [pc, #220]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d06d      	beq.n	8003208 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d14b      	bne.n	80031cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003134:	4b32      	ldr	r3, [pc, #200]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a31      	ldr	r2, [pc, #196]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800313a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe f9ec 	bl	800151c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe f9e8 	bl	800151c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e091      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	3b01      	subs	r3, #1
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	071b      	lsls	r3, r3, #28
 8003192:	491b      	ldr	r1, [pc, #108]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a18      	ldr	r2, [pc, #96]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f9ba 	bl	800151c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe f9b6 	bl	800151c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e05f      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x47c>
 80031ca:	e057      	b.n	800327c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f9a0 	bl	800151c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fe f99c 	bl	800151c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e045      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4b0>
 80031fe:	e03d      	b.n	800327c <HAL_RCC_OscConfig+0x54c>
 8003200:	40023800 	.word	0x40023800
 8003204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_RCC_OscConfig+0x558>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d030      	beq.n	8003278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d129      	bne.n	8003278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d122      	bne.n	8003278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800323e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003240:	4293      	cmp	r3, r2
 8003242:	d119      	bne.n	8003278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d10f      	bne.n	8003278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d107      	bne.n	8003278 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800

0800328c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0d0      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d910      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b67      	ldr	r3, [pc, #412]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 020f 	bic.w	r2, r3, #15
 80032ba:	4965      	ldr	r1, [pc, #404]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b63      	ldr	r3, [pc, #396]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a58      	ldr	r2, [pc, #352]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800330e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b50      	ldr	r3, [pc, #320]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	494d      	ldr	r1, [pc, #308]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d040      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d115      	bne.n	800336e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e073      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06b      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b39      	ldr	r3, [pc, #228]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4936      	ldr	r1, [pc, #216]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003380:	f7fe f8cc 	bl	800151c <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe f8c8 	bl	800151c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e053      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b2d      	ldr	r3, [pc, #180]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d210      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 020f 	bic.w	r2, r3, #15
 80033c6:	4922      	ldr	r1, [pc, #136]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e032      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4916      	ldr	r1, [pc, #88]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490e      	ldr	r1, [pc, #56]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341e:	f000 f821 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490a      	ldr	r1, [pc, #40]	@ (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1d0>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1d4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe f828 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00
 8003454:	40023800 	.word	0x40023800
 8003458:	080046c0 	.word	0x080046c0
 800345c:	20000000 	.word	0x20000000
 8003460:	20000008 	.word	0x20000008

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003468:	b094      	sub	sp, #80	@ 0x50
 800346a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003470:	2300      	movs	r3, #0
 8003472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003474:	2300      	movs	r3, #0
 8003476:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347c:	4b79      	ldr	r3, [pc, #484]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x200>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d00d      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003488:	2b08      	cmp	r3, #8
 800348a:	f200 80e1 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x1ec>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x34>
 8003492:	2b04      	cmp	r3, #4
 8003494:	d003      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x3a>
 8003496:	e0db      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b73      	ldr	r3, [pc, #460]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x204>)
 800349a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800349c:	e0db      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349e:	4b73      	ldr	r3, [pc, #460]	@ (800366c <HAL_RCC_GetSysClockFreq+0x208>)
 80034a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a2:	e0d8      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d063      	beq.n	8003582 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x200>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	099b      	lsrs	r3, r3, #6
 80034c0:	2200      	movs	r2, #0
 80034c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ce:	2300      	movs	r3, #0
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034d6:	4622      	mov	r2, r4
 80034d8:	462b      	mov	r3, r5
 80034da:	f04f 0000 	mov.w	r0, #0
 80034de:	f04f 0100 	mov.w	r1, #0
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e8:	0150      	lsls	r0, r2, #5
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4621      	mov	r1, r4
 80034f0:	1a51      	subs	r1, r2, r1
 80034f2:	6139      	str	r1, [r7, #16]
 80034f4:	4629      	mov	r1, r5
 80034f6:	eb63 0301 	sbc.w	r3, r3, r1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003508:	4659      	mov	r1, fp
 800350a:	018b      	lsls	r3, r1, #6
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003512:	4651      	mov	r1, sl
 8003514:	018a      	lsls	r2, r1, #6
 8003516:	4651      	mov	r1, sl
 8003518:	ebb2 0801 	subs.w	r8, r2, r1
 800351c:	4659      	mov	r1, fp
 800351e:	eb63 0901 	sbc.w	r9, r3, r1
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800352e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003536:	4690      	mov	r8, r2
 8003538:	4699      	mov	r9, r3
 800353a:	4623      	mov	r3, r4
 800353c:	eb18 0303 	adds.w	r3, r8, r3
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	462b      	mov	r3, r5
 8003544:	eb49 0303 	adc.w	r3, r9, r3
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003556:	4629      	mov	r1, r5
 8003558:	024b      	lsls	r3, r1, #9
 800355a:	4621      	mov	r1, r4
 800355c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003560:	4621      	mov	r1, r4
 8003562:	024a      	lsls	r2, r1, #9
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356a:	2200      	movs	r2, #0
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003570:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003574:	f7fc fe60 	bl	8000238 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003580:	e058      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003582:	4b38      	ldr	r3, [pc, #224]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	099b      	lsrs	r3, r3, #6
 8003588:	2200      	movs	r2, #0
 800358a:	4618      	mov	r0, r3
 800358c:	4611      	mov	r1, r2
 800358e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
 8003598:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	f04f 0000 	mov.w	r0, #0
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	0159      	lsls	r1, r3, #5
 80035aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ae:	0150      	lsls	r0, r2, #5
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4641      	mov	r1, r8
 80035b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ba:	4649      	mov	r1, r9
 80035bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d4:	ebb2 040a 	subs.w	r4, r2, sl
 80035d8:	eb63 050b 	sbc.w	r5, r3, fp
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	00eb      	lsls	r3, r5, #3
 80035e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ea:	00e2      	lsls	r2, r4, #3
 80035ec:	4614      	mov	r4, r2
 80035ee:	461d      	mov	r5, r3
 80035f0:	4643      	mov	r3, r8
 80035f2:	18e3      	adds	r3, r4, r3
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	464b      	mov	r3, r9
 80035f8:	eb45 0303 	adc.w	r3, r5, r3
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360a:	4629      	mov	r1, r5
 800360c:	028b      	lsls	r3, r1, #10
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003614:	4621      	mov	r1, r4
 8003616:	028a      	lsls	r2, r1, #10
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361e:	2200      	movs	r2, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	61fa      	str	r2, [r7, #28]
 8003624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003628:	f7fc fe06 	bl	8000238 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x200>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003644:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x204>)
 8003652:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003658:	4618      	mov	r0, r3
 800365a:	3750      	adds	r7, #80	@ 0x50
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	007a1200 	.word	0x007a1200

08003670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e049      	b.n	8003716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd fe34 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f000 fa74 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e049      	b.n	80037c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f841 	bl	80037cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f000 fa1d 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e0ff      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b14      	cmp	r3, #20
 800380a:	f200 80f0 	bhi.w	80039ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800380e:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003869 	.word	0x08003869
 8003818:	080039ef 	.word	0x080039ef
 800381c:	080039ef 	.word	0x080039ef
 8003820:	080039ef 	.word	0x080039ef
 8003824:	080038a9 	.word	0x080038a9
 8003828:	080039ef 	.word	0x080039ef
 800382c:	080039ef 	.word	0x080039ef
 8003830:	080039ef 	.word	0x080039ef
 8003834:	080038eb 	.word	0x080038eb
 8003838:	080039ef 	.word	0x080039ef
 800383c:	080039ef 	.word	0x080039ef
 8003840:	080039ef 	.word	0x080039ef
 8003844:	0800392b 	.word	0x0800392b
 8003848:	080039ef 	.word	0x080039ef
 800384c:	080039ef 	.word	0x080039ef
 8003850:	080039ef 	.word	0x080039ef
 8003854:	0800396d 	.word	0x0800396d
 8003858:	080039ef 	.word	0x080039ef
 800385c:	080039ef 	.word	0x080039ef
 8003860:	080039ef 	.word	0x080039ef
 8003864:	080039ad 	.word	0x080039ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fa34 	bl	8003cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0208 	orr.w	r2, r2, #8
 8003882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0204 	bic.w	r2, r2, #4
 8003892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	619a      	str	r2, [r3, #24]
      break;
 80038a6:	e0a5      	b.n	80039f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fa86 	bl	8003dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	619a      	str	r2, [r3, #24]
      break;
 80038e8:	e084      	b.n	80039f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fadd 	bl	8003eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0208 	orr.w	r2, r2, #8
 8003904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0204 	bic.w	r2, r2, #4
 8003914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69d9      	ldr	r1, [r3, #28]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	61da      	str	r2, [r3, #28]
      break;
 8003928:	e064      	b.n	80039f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fb33 	bl	8003f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	61da      	str	r2, [r3, #28]
      break;
 800396a:	e043      	b.n	80039f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fb6a 	bl	800404c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039aa:	e023      	b.n	80039f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fb9c 	bl	80040f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	021a      	lsls	r2, r3, #8
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039ec:	e002      	b.n	80039f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75fb      	strb	r3, [r7, #23]
      break;
 80039f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop

08003a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIM_ConfigClockSource+0x1c>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0b4      	b.n	8003b8e <HAL_TIM_ConfigClockSource+0x186>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	4b56      	ldr	r3, [pc, #344]	@ (8003b98 <HAL_TIM_ConfigClockSource+0x190>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5c:	d03e      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0xd4>
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a62:	f200 8087 	bhi.w	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6a:	f000 8086 	beq.w	8003b7a <HAL_TIM_ConfigClockSource+0x172>
 8003a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a72:	d87f      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b70      	cmp	r3, #112	@ 0x70
 8003a76:	d01a      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0xa6>
 8003a78:	2b70      	cmp	r3, #112	@ 0x70
 8003a7a:	d87b      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b60      	cmp	r3, #96	@ 0x60
 8003a7e:	d050      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x11a>
 8003a80:	2b60      	cmp	r3, #96	@ 0x60
 8003a82:	d877      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a84:	2b50      	cmp	r3, #80	@ 0x50
 8003a86:	d03c      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0xfa>
 8003a88:	2b50      	cmp	r3, #80	@ 0x50
 8003a8a:	d873      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	d058      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x13a>
 8003a90:	2b40      	cmp	r3, #64	@ 0x40
 8003a92:	d86f      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b30      	cmp	r3, #48	@ 0x30
 8003a96:	d064      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003a98:	2b30      	cmp	r3, #48	@ 0x30
 8003a9a:	d86b      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d060      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d867      	bhi.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d05c      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d05a      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x15a>
 8003aac:	e062      	b.n	8003b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003abe:	f000 fbe5 	bl	800428c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	609a      	str	r2, [r3, #8]
      break;
 8003ada:	e04f      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aec:	f000 fbce 	bl	800428c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003afe:	609a      	str	r2, [r3, #8]
      break;
 8003b00:	e03c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fb42 	bl	8004198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2150      	movs	r1, #80	@ 0x50
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fb9b 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003b20:	e02c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f000 fb61 	bl	80041f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2160      	movs	r1, #96	@ 0x60
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb8b 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003b40:	e01c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f000 fb22 	bl	8004198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2140      	movs	r1, #64	@ 0x40
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fb7b 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003b60:	e00c      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f000 fb72 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003b72:	e003      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e000      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	fffeff88 	.word	0xfffeff88

08003b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a40      	ldr	r2, [pc, #256]	@ (8003cb0 <TIM_Base_SetConfig+0x114>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bba:	d00f      	beq.n	8003bdc <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb4 <TIM_Base_SetConfig+0x118>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb8 <TIM_Base_SetConfig+0x11c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3b      	ldr	r2, [pc, #236]	@ (8003cbc <TIM_Base_SetConfig+0x120>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8003cc0 <TIM_Base_SetConfig+0x124>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb0 <TIM_Base_SetConfig+0x114>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d02b      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfc:	d027      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb4 <TIM_Base_SetConfig+0x118>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d023      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb8 <TIM_Base_SetConfig+0x11c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01f      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2a      	ldr	r2, [pc, #168]	@ (8003cbc <TIM_Base_SetConfig+0x120>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01b      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a29      	ldr	r2, [pc, #164]	@ (8003cc0 <TIM_Base_SetConfig+0x124>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d017      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a28      	ldr	r2, [pc, #160]	@ (8003cc4 <TIM_Base_SetConfig+0x128>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a27      	ldr	r2, [pc, #156]	@ (8003cc8 <TIM_Base_SetConfig+0x12c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00f      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a26      	ldr	r2, [pc, #152]	@ (8003ccc <TIM_Base_SetConfig+0x130>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a25      	ldr	r2, [pc, #148]	@ (8003cd0 <TIM_Base_SetConfig+0x134>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a24      	ldr	r2, [pc, #144]	@ (8003cd4 <TIM_Base_SetConfig+0x138>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <TIM_Base_SetConfig+0x13c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb0 <TIM_Base_SetConfig+0x114>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0xf8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc0 <TIM_Base_SetConfig+0x124>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d103      	bne.n	8003c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	615a      	str	r2, [r3, #20]
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40010400 	.word	0x40010400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800
 8003cd0:	40001800 	.word	0x40001800
 8003cd4:	40001c00 	.word	0x40001c00
 8003cd8:	40002000 	.word	0x40002000

08003cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0201 	bic.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4b2b      	ldr	r3, [pc, #172]	@ (8003db4 <TIM_OC1_SetConfig+0xd8>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 0302 	bic.w	r3, r3, #2
 8003d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a21      	ldr	r2, [pc, #132]	@ (8003db8 <TIM_OC1_SetConfig+0xdc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_OC1_SetConfig+0x64>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a20      	ldr	r2, [pc, #128]	@ (8003dbc <TIM_OC1_SetConfig+0xe0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10c      	bne.n	8003d5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0308 	bic.w	r3, r3, #8
 8003d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <TIM_OC1_SetConfig+0xdc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_OC1_SetConfig+0x8e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a15      	ldr	r2, [pc, #84]	@ (8003dbc <TIM_OC1_SetConfig+0xe0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d111      	bne.n	8003d8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	fffeff8f 	.word	0xfffeff8f
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f023 0210 	bic.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea4 <TIM_OC2_SetConfig+0xe4>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0320 	bic.w	r3, r3, #32
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a23      	ldr	r2, [pc, #140]	@ (8003ea8 <TIM_OC2_SetConfig+0xe8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_OC2_SetConfig+0x68>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a22      	ldr	r2, [pc, #136]	@ (8003eac <TIM_OC2_SetConfig+0xec>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10d      	bne.n	8003e44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a18      	ldr	r2, [pc, #96]	@ (8003ea8 <TIM_OC2_SetConfig+0xe8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC2_SetConfig+0x94>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a17      	ldr	r2, [pc, #92]	@ (8003eac <TIM_OC2_SetConfig+0xec>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d113      	bne.n	8003e7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	feff8fff 	.word	0xfeff8fff
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40010400 	.word	0x40010400

08003eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <TIM_OC3_SetConfig+0xe0>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a22      	ldr	r2, [pc, #136]	@ (8003f94 <TIM_OC3_SetConfig+0xe4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_OC3_SetConfig+0x66>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a21      	ldr	r2, [pc, #132]	@ (8003f98 <TIM_OC3_SetConfig+0xe8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10d      	bne.n	8003f32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a17      	ldr	r2, [pc, #92]	@ (8003f94 <TIM_OC3_SetConfig+0xe4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_OC3_SetConfig+0x92>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <TIM_OC3_SetConfig+0xe8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d113      	bne.n	8003f6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	fffeff8f 	.word	0xfffeff8f
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40010400 	.word	0x40010400

08003f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004040 <TIM_OC4_SetConfig+0xa4>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a13      	ldr	r2, [pc, #76]	@ (8004044 <TIM_OC4_SetConfig+0xa8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_OC4_SetConfig+0x68>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a12      	ldr	r2, [pc, #72]	@ (8004048 <TIM_OC4_SetConfig+0xac>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d109      	bne.n	8004018 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800400a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	feff8fff 	.word	0xfeff8fff
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400

0800404c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <TIM_OC5_SetConfig+0x98>)
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800408c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a12      	ldr	r2, [pc, #72]	@ (80040e8 <TIM_OC5_SetConfig+0x9c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_OC5_SetConfig+0x5e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a11      	ldr	r2, [pc, #68]	@ (80040ec <TIM_OC5_SetConfig+0xa0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d109      	bne.n	80040be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	fffeff8f 	.word	0xfffeff8f
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40010400 	.word	0x40010400

080040f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4b1c      	ldr	r3, [pc, #112]	@ (800418c <TIM_OC6_SetConfig+0x9c>)
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	051b      	lsls	r3, r3, #20
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a13      	ldr	r2, [pc, #76]	@ (8004190 <TIM_OC6_SetConfig+0xa0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC6_SetConfig+0x60>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a12      	ldr	r2, [pc, #72]	@ (8004194 <TIM_OC6_SetConfig+0xa4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d109      	bne.n	8004164 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	029b      	lsls	r3, r3, #10
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	feff8fff 	.word	0xfeff8fff
 8004190:	40010000 	.word	0x40010000
 8004194:	40010400 	.word	0x40010400

08004198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0210 	bic.w	r2, r3, #16
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	f043 0307 	orr.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e06d      	b.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a30      	ldr	r2, [pc, #192]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2f      	ldr	r2, [pc, #188]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800431e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004330:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a20      	ldr	r2, [pc, #128]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004356:	d01d      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1c      	ldr	r2, [pc, #112]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1a      	ldr	r2, [pc, #104]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a15      	ldr	r2, [pc, #84]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a16      	ldr	r2, [pc, #88]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a15      	ldr	r2, [pc, #84]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10c      	bne.n	80043ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800439a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40001800 	.word	0x40001800

080043e8 <memset>:
 80043e8:	4402      	add	r2, r0
 80043ea:	4603      	mov	r3, r0
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d100      	bne.n	80043f2 <memset+0xa>
 80043f0:	4770      	bx	lr
 80043f2:	f803 1b01 	strb.w	r1, [r3], #1
 80043f6:	e7f9      	b.n	80043ec <memset+0x4>

080043f8 <__errno>:
 80043f8:	4b01      	ldr	r3, [pc, #4]	@ (8004400 <__errno+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000010 	.word	0x20000010

08004404 <__libc_init_array>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4d0d      	ldr	r5, [pc, #52]	@ (800443c <__libc_init_array+0x38>)
 8004408:	4c0d      	ldr	r4, [pc, #52]	@ (8004440 <__libc_init_array+0x3c>)
 800440a:	1b64      	subs	r4, r4, r5
 800440c:	10a4      	asrs	r4, r4, #2
 800440e:	2600      	movs	r6, #0
 8004410:	42a6      	cmp	r6, r4
 8004412:	d109      	bne.n	8004428 <__libc_init_array+0x24>
 8004414:	4d0b      	ldr	r5, [pc, #44]	@ (8004444 <__libc_init_array+0x40>)
 8004416:	4c0c      	ldr	r4, [pc, #48]	@ (8004448 <__libc_init_array+0x44>)
 8004418:	f000 f946 	bl	80046a8 <_init>
 800441c:	1b64      	subs	r4, r4, r5
 800441e:	10a4      	asrs	r4, r4, #2
 8004420:	2600      	movs	r6, #0
 8004422:	42a6      	cmp	r6, r4
 8004424:	d105      	bne.n	8004432 <__libc_init_array+0x2e>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	f855 3b04 	ldr.w	r3, [r5], #4
 800442c:	4798      	blx	r3
 800442e:	3601      	adds	r6, #1
 8004430:	e7ee      	b.n	8004410 <__libc_init_array+0xc>
 8004432:	f855 3b04 	ldr.w	r3, [r5], #4
 8004436:	4798      	blx	r3
 8004438:	3601      	adds	r6, #1
 800443a:	e7f2      	b.n	8004422 <__libc_init_array+0x1e>
 800443c:	08004f70 	.word	0x08004f70
 8004440:	08004f70 	.word	0x08004f70
 8004444:	08004f70 	.word	0x08004f70
 8004448:	08004f74 	.word	0x08004f74
 800444c:	00000000 	.word	0x00000000

08004450 <log>:
 8004450:	b4f0      	push	{r4, r5, r6, r7}
 8004452:	ee10 0a90 	vmov	r0, s1
 8004456:	ee10 3a10 	vmov	r3, s0
 800445a:	f04f 34ff 	mov.w	r4, #4294967295
 800445e:	429c      	cmp	r4, r3
 8004460:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8004464:	4c70      	ldr	r4, [pc, #448]	@ (8004628 <log+0x1d8>)
 8004466:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 800446a:	418c      	sbcs	r4, r1
 800446c:	ed2d 8b02 	vpush	{d8}
 8004470:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8004474:	d35a      	bcc.n	800452c <log+0xdc>
 8004476:	4a6d      	ldr	r2, [pc, #436]	@ (800462c <log+0x1dc>)
 8004478:	4290      	cmp	r0, r2
 800447a:	bf08      	it	eq
 800447c:	2b00      	cmpeq	r3, #0
 800447e:	f000 80c4 	beq.w	800460a <log+0x1ba>
 8004482:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8004486:	ee30 0b47 	vsub.f64	d0, d0, d7
 800448a:	4b69      	ldr	r3, [pc, #420]	@ (8004630 <log+0x1e0>)
 800448c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8004490:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8004494:	ee20 4b02 	vmul.f64	d4, d0, d2
 8004498:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800449c:	eea6 7b00 	vfma.f64	d7, d6, d0
 80044a0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80044a4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80044a8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80044ac:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80044b0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80044b4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80044b8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80044bc:	eea5 6b02 	vfma.f64	d6, d5, d2
 80044c0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80044c4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80044c8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80044cc:	eea3 5b02 	vfma.f64	d5, d3, d2
 80044d0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80044d4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80044d8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80044dc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80044e0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80044e4:	eeb0 2b47 	vmov.f64	d2, d7
 80044e8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8004610 <log+0x1c0>
 80044ec:	eeb0 6b40 	vmov.f64	d6, d0
 80044f0:	eeb0 3b40 	vmov.f64	d3, d0
 80044f4:	eea0 6b07 	vfma.f64	d6, d0, d7
 80044f8:	eea0 6b47 	vfms.f64	d6, d0, d7
 80044fc:	ee30 8b46 	vsub.f64	d8, d0, d6
 8004500:	ee26 1b06 	vmul.f64	d1, d6, d6
 8004504:	eea1 3b05 	vfma.f64	d3, d1, d5
 8004508:	ee30 7b43 	vsub.f64	d7, d0, d3
 800450c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8004510:	eea1 7b05 	vfma.f64	d7, d1, d5
 8004514:	ee25 5b08 	vmul.f64	d5, d5, d8
 8004518:	eea5 7b00 	vfma.f64	d7, d5, d0
 800451c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8004520:	ee33 0b07 	vadd.f64	d0, d3, d7
 8004524:	ecbd 8b02 	vpop	{d8}
 8004528:	bcf0      	pop	{r4, r5, r6, r7}
 800452a:	4770      	bx	lr
 800452c:	f1a2 0410 	sub.w	r4, r2, #16
 8004530:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8004534:	428c      	cmp	r4, r1
 8004536:	d923      	bls.n	8004580 <log+0x130>
 8004538:	18d9      	adds	r1, r3, r3
 800453a:	eb40 0400 	adc.w	r4, r0, r0
 800453e:	4321      	orrs	r1, r4
 8004540:	d105      	bne.n	800454e <log+0xfe>
 8004542:	ecbd 8b02 	vpop	{d8}
 8004546:	2001      	movs	r0, #1
 8004548:	bcf0      	pop	{r4, r5, r6, r7}
 800454a:	f000 b885 	b.w	8004658 <__math_divzero>
 800454e:	4939      	ldr	r1, [pc, #228]	@ (8004634 <log+0x1e4>)
 8004550:	4288      	cmp	r0, r1
 8004552:	bf08      	it	eq
 8004554:	2b00      	cmpeq	r3, #0
 8004556:	d0e5      	beq.n	8004524 <log+0xd4>
 8004558:	0413      	lsls	r3, r2, #16
 800455a:	d403      	bmi.n	8004564 <log+0x114>
 800455c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004560:	4393      	bics	r3, r2
 8004562:	d104      	bne.n	800456e <log+0x11e>
 8004564:	ecbd 8b02 	vpop	{d8}
 8004568:	bcf0      	pop	{r4, r5, r6, r7}
 800456a:	f000 b88d 	b.w	8004688 <__math_invalid>
 800456e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8004618 <log+0x1c8>
 8004572:	ee20 7b07 	vmul.f64	d7, d0, d7
 8004576:	ec53 2b17 	vmov	r2, r3, d7
 800457a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800457e:	4613      	mov	r3, r2
 8004580:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8004584:	492a      	ldr	r1, [pc, #168]	@ (8004630 <log+0x1e0>)
 8004586:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800458a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800458e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8004592:	0d15      	lsrs	r5, r2, #20
 8004594:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8004598:	052d      	lsls	r5, r5, #20
 800459a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 800459e:	1e1e      	subs	r6, r3, #0
 80045a0:	1b47      	subs	r7, r0, r5
 80045a2:	ec47 6b16 	vmov	d6, r6, r7
 80045a6:	1512      	asrs	r2, r2, #20
 80045a8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80045ac:	ee07 2a90 	vmov	s15, r2
 80045b0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80045b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80045b8:	ed91 4b00 	vldr	d4, [r1]
 80045bc:	ee25 1b02 	vmul.f64	d1, d5, d2
 80045c0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80045c4:	eea4 7b06 	vfma.f64	d7, d4, d6
 80045c8:	ee35 4b07 	vadd.f64	d4, d5, d7
 80045cc:	ee37 0b44 	vsub.f64	d0, d7, d4
 80045d0:	ed91 7b02 	vldr	d7, [r1, #8]
 80045d4:	ee30 0b05 	vadd.f64	d0, d0, d5
 80045d8:	eea7 0b06 	vfma.f64	d0, d7, d6
 80045dc:	ed91 7b04 	vldr	d7, [r1, #16]
 80045e0:	ed91 6b08 	vldr	d6, [r1, #32]
 80045e4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80045e8:	ed91 7b06 	vldr	d7, [r1, #24]
 80045ec:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 80045f0:	eea6 7b05 	vfma.f64	d7, d6, d5
 80045f4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 80045f8:	eea3 6b05 	vfma.f64	d6, d3, d5
 80045fc:	eea6 7b02 	vfma.f64	d7, d6, d2
 8004600:	eea1 0b07 	vfma.f64	d0, d1, d7
 8004604:	ee30 0b04 	vadd.f64	d0, d0, d4
 8004608:	e78c      	b.n	8004524 <log+0xd4>
 800460a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8004620 <log+0x1d0>
 800460e:	e789      	b.n	8004524 <log+0xd4>
 8004610:	00000000 	.word	0x00000000
 8004614:	41a00000 	.word	0x41a00000
 8004618:	00000000 	.word	0x00000000
 800461c:	43300000 	.word	0x43300000
	...
 8004628:	000308ff 	.word	0x000308ff
 800462c:	3ff00000 	.word	0x3ff00000
 8004630:	080046d8 	.word	0x080046d8
 8004634:	7ff00000 	.word	0x7ff00000

08004638 <with_errno>:
 8004638:	b510      	push	{r4, lr}
 800463a:	ed2d 8b02 	vpush	{d8}
 800463e:	eeb0 8b40 	vmov.f64	d8, d0
 8004642:	4604      	mov	r4, r0
 8004644:	f7ff fed8 	bl	80043f8 <__errno>
 8004648:	eeb0 0b48 	vmov.f64	d0, d8
 800464c:	ecbd 8b02 	vpop	{d8}
 8004650:	6004      	str	r4, [r0, #0]
 8004652:	bd10      	pop	{r4, pc}
 8004654:	0000      	movs	r0, r0
	...

08004658 <__math_divzero>:
 8004658:	b082      	sub	sp, #8
 800465a:	2800      	cmp	r0, #0
 800465c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8004660:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8004664:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8004668:	ed8d 7b00 	vstr	d7, [sp]
 800466c:	ed9d 0b00 	vldr	d0, [sp]
 8004670:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8004680 <__math_divzero+0x28>
 8004674:	2022      	movs	r0, #34	@ 0x22
 8004676:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800467a:	b002      	add	sp, #8
 800467c:	f7ff bfdc 	b.w	8004638 <with_errno>
	...

08004688 <__math_invalid>:
 8004688:	eeb0 7b40 	vmov.f64	d7, d0
 800468c:	eeb4 7b47 	vcmp.f64	d7, d7
 8004690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004694:	ee30 6b40 	vsub.f64	d6, d0, d0
 8004698:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800469c:	d602      	bvs.n	80046a4 <__math_invalid+0x1c>
 800469e:	2021      	movs	r0, #33	@ 0x21
 80046a0:	f7ff bfca 	b.w	8004638 <with_errno>
 80046a4:	4770      	bx	lr
	...

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
